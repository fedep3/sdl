#!/usr/bin/python
# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
import pandas as pd
import pyflux as pf
from sklearn.metrics import auc

from readers.mat_reader import MatReader

from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import BaggingRegressor
from sklearn.linear_model import RANSACRegressor
from sklearn.model_selection import cross_val_score
from sklearn import svm
from sklearn.metrics import roc_curve
from scipy.optimize import brentq
from scipy.interpolate import interp1d


def main():
    mat_reader = MatReader('ColdComplaintData/Training')
    ts, xs, ys = mat_reader.read()
    
    if __debug__:
        cmp_regression_algs(xs, ys)

    # Build the ideal linear regression model
    clf = LinearRegression()
    clf.fit(xs, ys)

    # Calculate residuals and predict alarms using validation data
    # Using validation or training data for prediction?
    mat_reader = MatReader('ColdComplaintData/Testing')
    ttest, xtest, ytest = mat_reader.read()

    print "Actuals: ", ytest

    # pred_future = [3.029558117734962, 3.0295581195385468, 3.0295581195385468, 3.0295581195385468, 3.0295581195385468, 3.0295545888711048, 3.023504084921214, 3.0619577856479747, 6.6577965221905711, 6.7074624511473164, 3.5944121614785907, 3.3936045250764924, 3.7109287482751387, 3.831967170830846, 3.8319445093416395, 3.831965320378492, 3.8317149173316727, 3.8324655375762609, 3.8319708442403786, 3.8319682049692281, 3.831968115392558, 3.8319680774579763, 3.8319681570905475, 3.8319681570905475, 3.8319681570905475, 3.8319681570905475, 3.8319681570905475, 3.8319664245655463, 3.8321409553322132, 21.096435484519127, 26.453586388488809, 5.1482842427211049, 4.0302436727181501, 3.9367427029119302, 4.6176348606155235, 4.8397882155127903, 4.844405595544873, 4.8444729916322427, 4.8444730668629745, 4.8444731743954916, 4.8444731402941246, 4.8444731346155363, 4.8444731331909399, 4.8444731331909399, 4.8444731331909399, 4.8444672451894037, 5.1268170240984965, 4.798084062404036, 49.646642813716312, 2.7201149278834125, 4.8298391616465253, 4.8031936376802493, 4.704151436963838, 4.7364612447794379, 4.65136634818652, -126.78515742781258, 5.409607686364418, 4.6450467268988991, 4.4142865009422128, 1.9023146146235812, -3.8056507627101857, 4.7495003795041528, 5.7758675413749296, 5.3087963089833821, 5.6349737273488163, 5.6314927880136771, 5.631483068871967, 5.6314830996434484, 5.6314831657913524, 5.6314831302994062, 5.6314831173014186, 5.6314831173014186, 5.6314831173014186, 5.631490313731339, 5.6303497050021525, 6.7594376976104265, 4.7685772023845079, 11.963039374883312, 5.8285231664994619, 5.6617870118543561, 5.7672873791991996, 5.7314214210639696, 5.7547895404733724, 5.8363083617782818, 5.8365280530441952, 5.8365285554416753, 5.8365285385603878, 5.8365282561002187, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8365285306508499, 5.8375516291220322, 5.8372368853901957, 5.843977706978758, 5.975597011591316, 5.8514152895648115, 5.6327862787428549, 5.8767645415166019, 5.8346705990969321, 5.8434069202341261, 5.8470163907533408, 5.8486797586986823, 5.859435294401881, 5.8628298314950893, 5.8829786864051137, 5.8672202927381853, 5.8661397082174407, 5.8591596529080876, 5.8918083967465602, 5.8635196790416977, 5.8928017760823046, 5.8715538180910194, 5.8563435742318273, 5.8820359408841938, 5.9149130966820325, 6.1002624590825683, 6.133931896534337, 6.2972930062885606, 11.320992985778693, -127.06559509921384, 5.8043727035608779, 5.2011379081715186, 5.404597575547184, 5.2904664819250353, 3.8050047895399395, 4.9032341905246213, 4.9145638844407413, 4.8566838755993382, 5.3408882514357856, 3.873535792052937, 5.330288904451197, 2.0302567562579767, -2.6496867467720597, 4.7978997867477098, 3.9838178476676704, 4.2804589580357701, 4.1360797064698698, 4.1246234171164051, 4.120575295571677, 4.1060028558693293, 4.1653265107369091, 4.1362133511332404, 4.1341368514970931, 4.137077776025408, 4.1369025873075005, 4.1357062738250621, 4.138305670076968, 4.1396607717660991, 4.1383531826068749, 4.1494378481755794, -5.4782069464434606, 3.6344393844768956, 4.1116812625543542, 15.982888239482161, 4.0509852194683411, 0.52459168850030169, 3.3053707716885459, 2.699198528133409, 3.1068707821153452, 3.1178973470685714, 3.1305792234551606, 3.1369548679323254, 3.1261676812173729, 3.1198675560021187, 3.1329488610751377, 3.0786653895145384, 1.6028781079510148, 5.5281485738836489, 3.0701859024609917, 3.0644233719550908, 3.0644228366243009, 3.0644230474316991, 3.0644229373444674, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.0644230116488202, 3.064416781874717, 3.0648100818905344, 3.4159465762761307, 11.029089020288133, 24.942805642104236, 4.8475407400167203, 3.2361910035772521, 4.5656543963871492, 4.0769289050076258, 4.0769142182923028, 4.0769287444138991, 4.0769269109320945, 4.0769269836927506, 4.0769318081448098, 4.0769270138392022, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.0769270130203257, 4.076926402502985, 3.4717480643695025, -37.767377648672309, 14.607786350425574, 35.377317404281456, -8.4836731870159348, 4.1859290654528181, 4.7009718463534274, 4.899853498145843, 5.1063888483783879, 5.0894252815114465, 5.0894318743489926, 5.0894320882558688, 5.0894319835028163, 5.0872589023513921, 5.0878596829937317, 5.0943205701076542, 8.9659019075192106, 5.4507474727237017, 5.4387023347556998, 5.0936861495306163, 4.6593717688786818, 4.1554309362154758, 6.7248815071548291, 3.4790448262728777, 5.1318919188951666, 22.944989422782861, 3.9443055103821809, -4.7494401155911721, 10.06058285231007, 8.7008625608501831, 6.6277598225627923, 5.8692323950977601, 6.2282215899292508, 5.5075472489233865, 5.90854251220322, 5.9833841345840355, 5.9833887246035315, 5.9833889412222305, 5.9833888122966865, 5.9757917790522868, -264.3808110582728, 318.80458598739983, 20.400249755472824, 16.624885988390304, 9.5790569847892399, 8.7410513315998308, 7.6727240514985766, 6.6719114691030379, -109.85074233168619, 6.7921953536821196, 13.029554495554635, 7.1194970278878191, 4.4197381730427594, 6.9828413742111923, 6.2833634538371719, 6.4998444865793177, 6.5359013658892184, 5.1146003528046933, 6.0098696044925086, 5.8326396282911022, 5.7957418446638522, 5.9205125933221048, 5.9932782208718178, 6.1691881511408528, 5.9532479516089207, 5.8381785874876524, 5.9315269093083298, 6.2751408025928113, 5.5342401205709129, 5.3524328084841946, 8.2698650702451388, 5.0108006924972495, 5.017261650234814, 5.0515481427750597, 3.8064443139374937, 5.9493968187862016, 6.6864475622972126, 10.398207013468792, 5.9496041240920565, -17.871496407113487, 38.987508114496428, 9.6309057178110962, 19.934750529118343, 5.5591081633995332, 6.0507201049431423, 7.4318628304121468, 7.3993034239586084, 6.725016623467396, 7.1137184184130673, 6.8789159196370298, 6.8932421314296697, 6.885811644077946, 8.6030484326155534, 6.8868117525712815, 5.8161600042658241, 6.2360027761741108, -8.3747720429916832, 6.9422694248987735, -23.995230408535495, -18.91728533114215, 0.45329833010803533, -40.517653255256171, 5.5202571942359056, 6.0831550438038668, 1.402182307362613, 3.2487309832236821, 1.0124452179774899, 4.7409134336537058, 3.7284900445181615, 2.6176950851460425, 2.1887135340849699, -10.780564510266148, -0.86920829543135092, -2.3597696442902221, 0.27793056227451807, -0.8054832321936618, -0.72121926895056498, 0.16342315696183857, -27.961615603434993, -1.0236180198891283, -0.16589119256674428, -17.130386100309931, -0.56416952921457975, -1.0106558044670579, -0.97343296348498265, -14.091003832711188, -12.007671225373231, -6.7132516923572432, -6.2895182686496041, -1.5506301030655136, -2.0223192463927422, -0.40224955711311455, -0.75715844995547943, 1086.2847195429188, 93262.283755828816, -1.2459964622553756, -1.256890757393671, -1.2643600468617726, -1.2649422357811309, -1.259207249163564, -1.2628843018844886, -1.0713843015068165, -1.234436396173608, -1.2498385773834468, -1.2528446898739893, 101.35033724393038, -3.2709562134257739, -1.8711191298581182, -3.4052173243994224, -2.9492255468400712, -1.3422379347875846, -8.5819348645023386, -1.7469274988209404, -2.7930313522010488, -2.0864211525427341, -2.0976118623284798, -2.1793246995709099, -1.622175217071024, -1.9982586271940606, -2.0190787334648115, -1.7618637440247147, -2.4649213649917856, -2.0675662888823179, -2.0579680724656524, -2.0680704800497329, 2.0173162927588497, -28.934998023884042, 1.4904050598072183, -16.30116233858228, 25.008221715492624, 17.482907405401594, -3.7830680467336819, 14.675038758263231, 5.6173694960048843, 3.876636037218967, -4.3798117629147386, 2.4477708495358499, 0.21640214218630777, -1.1252930999898547, 62.784191698642509, 0.21267921065901568, -1.258963855703334, -0.00055056682744791113, -1.4621481457271244, -1.0792565405426588, 0.014796346291450289, -52.631092603664015, -1.9275069482679319, -14.921388346273609, -0.52926110622266476, -0.97793509857091665, -0.42462135686395486, -0.95017495244892625, -0.64131267238799439, -8.9967842218637983, -0.49496680419757511, -0.63306317907433862, -0.61674073899808424, -0.63623213848926952, -0.62053953484191338, -0.61972125672178457, -0.61941632060309204, -0.63798872510473847, -5.456771966981389, -0.65573414005869757, -5687.5346233163109, 153.55555645453765, -1.4329446906543546, -1.7563231199575995, 59.807722154081709, 90.616185292301054, -4.3964235141975143, -27.029596316442202, 4.5809736822607956, -3.5858942965448577, -0.46832966812488874, -0.68344617730883983, 23.61503812142395, 0.41730243558241931, 0.022569436447451352, 0.53441279053530999, 6029.0641239501138, 9.5438472077320498, 6.6288458697696111, -4.2766554394319023, 0.15784460071423889, 3.9814590611182625, 1.9386660944458332, 0.67736541757075464, 0.60699119294715465, 0.63072703604450608, -7.0910847731731135, -1.4770788829147818, -0.75436144399862826, -0.84454890114976289, -0.90249044469372741, -0.89113236125558093, -0.89373702373703368, -0.50869365304636172, -0.89188266554094831, -0.9221874521675596, -0.90326961866466438, -0.90650714637389274, -0.91655117467407088, -0.92312863126162603, -0.94347339272173059, -0.90706149944865855, -0.89183825824788698, -0.89864399058587252, -0.90062244648906797, -0.89902744781024635, -0.90388355956672561, -0.89797698910063506, -0.94255682701342391, -0.99512399829945763, 11.077184356008541, 0.17310664459447939, -0.67766136217222728, -0.76795893681671845, 3996.6645528548179, 1.8002937358098841, 0.94226161813604437, 0.1231349185974608, 0.10561548859880773, 16.118611592963315, 0.10732539915656492, -4.4169747152901389, -0.38441016699203429, -0.57247622394374065, -1.2768331707861336, -0.040490900494256812, 140.43430512042528, 191.18159503721603, -0.98142408937359571, -2.3217842947556662, -0.98165071515215474, -0.981641380562569, -0.98165529823014819, -0.98068077297431078, -0.5981523634043725, -0.97328148768611178, -0.9527644314795034, -0.95144403640987085]
    pred_future = predict_residuals(clf, ttest, xtest, ytest)
    print "Future residual predictions: ", pred_future

    # TODO change threshold levels
    threshold = calc_threshold(pred_future, ytest)
    cor_count, fa_count, md_count = calc_error_rates(threshold, pred_future, ytest)
    print "Correct Alarm Count: ", cor_count
    print "False Alarm Count: ", fa_count
    print "Missed Detection Count: ", md_count


def predict_residuals(clf, ttest, xtest, ytest):
    # Calculate residuals
    pred = []
    pred_res = []
    for x in xrange(len(xtest)):
        pred.append(clf.predict(xtest[x])[0])
        pred_res.append(pred[x] - ytest[x])

    if __debug__:
        # Plot
        plt.figure()
        plt.title('Actual vs. Prediction')
        plt.plot(ytest)
        plt.plot(pred)
        plt.plot(pred_res)
        plt.show()

    # Predicting future residuals
    pred_future = []
    for x in xrange(len(pred_res)-16):
        df = pd.DataFrame(pred_res[x:x+16], index=ttest[x:x+16], columns=['residuals'])
        #df.plot(figsize=(16,12))
        model = pf.ARIMA(data=df,ar=4,ma=4,integ=0,target='residuals')
        mod = model.fit("MLE")
        #mod.summary()
        #model.plot_predict(h=12,past_values=16,figsize=(15,5))
        pred_future.append(model.predict(h=12)['residuals'][11])
        #print pred_future

    return pred_future


def calc_threshold(pred_future, actuals):
    prod_future_max = max(pred_future)
    prod_future_min = min(pred_future)
    prod_future_delta = prod_future_max - prod_future_min

    # Predict alarms with the given level
    alarms_predictions = []
    for p in pred_future:
        alarms_predictions.append((p - prod_future_min)/prod_future_delta)

    # Calcuate whether or not there was actually an alarm anywhere
    # in the next time period
    alarm_actuals = []
    for i in xrange(len(actuals) - 16):
        alarm_actual = False
        for x in xrange(16):
            if actuals[i + x] < 68.1:
                alarm_actual = True
        alarm_actuals.append(alarm_actual)

    false_positive_rate, true_positive_rate, thresholds = roc_curve(alarm_actuals, alarms_predictions)
    roc_auc = auc(false_positive_rate, true_positive_rate)

    plt.title('Receiver Operating Characteristic')
    plt.plot(false_positive_rate, true_positive_rate, 'b',
             label='AUC = %0.2f' % roc_auc)
    plt.legend(loc='lower right')
    plt.plot([0, 1], [0, 1], 'r--')
    plt.xlim([-0.1, 1.2])
    plt.ylim([-0.1, 1.2])
    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate')
    plt.show()

    return brentq(lambda x: 1. - x - interp1d(false_positive_rate, true_positive_rate)(x), 0., 1.)


def calc_error_rates(threshold, pred_future, actuals):
    La = threshold
    
    # Predict alarms with the given level
    alarms = []
    for p in pred_future:
        if abs(p) > La:
            alarms.append(True)
        else:
            alarms.append(False)

    # Calcuate whether or not there was actually an alarm anywhere
    # in the next time period
    alarm_actuals = []
    for i in xrange(len(actuals)-16):
        alarm_actual = False
        for x in xrange(16):
            if actuals[i+x] < 68.1:
                alarm_actual = True
        alarm_actuals.append(alarm_actual)

    # Calculate the false alarm and missed detection rate
    fa_count = 0
    md_count = 0
    cor_count = 0
    for r in xrange(len(alarms)):
        if alarms[r] == True and alarm_actuals[r] == False:
            fa_count += 1
        elif alarms[r] == False and alarm_actuals[r] == True:
            md_count += 1
        else:
            cor_count += 1

    return cor_count, fa_count, md_count



def cmp_regression_algs(xs, ys):
    num_folds = 10
    # prepare models
    models = [('SVM', svm.SVR()), ('KNN', KNeighborsRegressor()), ('LR', LinearRegression()),
              ('BNN', BaggingRegressor()), ('RANSAC', RANSACRegressor())]
    # evaluate each model in tusvm.rn
    results = []
    names = []
    scoring = 'neg_mean_squared_error'
    for name, model in models:
        cv_results = cross_val_score(model, xs, ys, cv=num_folds, scoring=scoring)
        results.append(cv_results)
        names.append(name)
        msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
        print(msg)
    # boxplot algorithm comparison
    fig = plt.figure()
    fig.suptitle('Algorithm Comparison')
    ax = fig.add_subplot(111)
    plt.boxplot(results)
    ax.set_xticklabels(names)
    plt.show()

# Simple example on how to read the data.
if __name__ == "__main__":
    main()

